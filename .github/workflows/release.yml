# .github/workflows/release.yml
name: Create Release Executable

on:
  push:
    branches: [ main ]

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for GitVersion

      # 2. Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 3. Determine Version using GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1

      # 4. Run Tests (Removed explicit restore step before this)
      #    dotnet test will restore/build if necessary for the tests
      - name: Run Tests
        run: dotnet test --configuration Release

      # 5. Build and Publish (Removed --no-restore flag)
      #    dotnet publish will now handle restore for the specified runtime
      - name: Publish Application
        run: |
          dotnet publish ./src/HardlineProphet.Cli/HardlineProphet.csproj `
            -c Release `
            --runtime win-x64 `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:Version=${{ steps.gitversion.outputs.assemblySemVer }} `
            -o ./publish
        # ... (options explanation) ...

      # 6. Create GitHub Release and Upload Artifact
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.gitversion.outputs.majorMinorPatch }}
          name: Release v${{ steps.gitversion.outputs.majorMinorPatch }}
          body: |
            Release based on commit ${{ github.sha }}
            Version: ${{ steps.gitversion.outputs.semVer }}
            Full SemVer: ${{ steps.gitversion.outputs.fullSemVer }}
          draft: false
          prerelease: ${{ steps.gitversion.outputs.isPreRelease }}
          files: ./publish/HardlineProphet.exe # Adjusted executable name

